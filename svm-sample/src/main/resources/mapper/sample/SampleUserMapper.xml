<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="svm.sample.dao.SampleUserMapper" >

    <insert id="save" parameterType="svm.sample.entity.UserDO">
        insert into sample_emp(emp_id,name,birthday,province,city,dept_id,salary,work_year,gender,memo,file_name,attachment_id)
            values (
                #{id, jdbcType=NUMERIC},
                #{name, jdbcType=VARCHAR},
                #{birthday, jdbcType=DATE},
                #{province, jdbcType=VARCHAR},
                #{city, jdbcType=VARCHAR},
                #{deptId, jdbcType=VARCHAR},
                #{salary, jdbcType=NUMERIC},
                #{workYear, jdbcType=NUMERIC},
                #{gender, jdbcType=VARCHAR},
                #{memo, jdbcType=VARCHAR},
                #{fileName, jdbcType=VARCHAR},
                #{attachmentId, jdbcType=NUMERIC})
    </insert>

    <update id="update" parameterType="svm.sample.entity.UserDO">
        update sample_emp set
            name=#{name},
            birthday=#{birthday},
            province=#{province},
            city=#{city},
            dept_id=#{deptId},
            salary=#{salary},
            work_year=#{workYear},
            gender=#{gender},
            memo=#{memo},
            file_name=#{fileName},
            attachment_id=#{attachmentId}
        where emp_id=#{id}
    </update>

    <!-- 批量删除 -->
    <delete id="delete" parameterType="Long[]">
        <!-- collection: 用来指定循环的数据的类型 可以填的值有：array,list,map -->
        <!-- item: 循环中为每个循环的数据指定一个别名 -->
        <!-- index: 循环中循环的下标 -->
        <!-- open: 开始, close: 结束, separator: 数组中元素之间的分隔符 -->
        delete from sample_emp where emp_id in
        <foreach collection="array" item="id" index="no" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <resultMap type="svm.sample.entity.UserDO" id="userMap">
        <id column="emp_id" property="id"  />
        <!--result column="dept_id" property="deptId" />
        <result column="work_year" property="workYear" /-->
    </resultMap>

    <select id="getUser" resultType="svm.sample.entity.UserDO" parameterType="long" resultMap="userMap">
        select emp_id,name,birthday,province,city,dept_id,salary,work_year,gender,memo,file_name,attachment_id
        from sample_emp where emp_id=#{id}
    </select>

    <select id="queryAllUsers" resultType="svm.sample.entity.UserDO" resultMap="userMap">
        select emp_id,name,birthday,province,city,dept_id,salary,work_year,gender,memo,file_name,attachment_id
        from sample_emp
    </select>

    <select id="queryUsers" resultType="svm.sample.entity.UserDO" parameterType="svm.sample.service.dto.UserQueryDTO" resultMap="userMap">
        select emp_id,name,birthday,province,city,dept_id,salary,work_year,gender,memo,file_name,attachment_id
        from sample_emp
        where birthday between #{birthdayBegin} and #{birthdayEnd}
        <!--trim prefix="VALUES(" suffix=")" suffixOverrides=","-->
        <if test="name != null"> and name=#{name}</if>
        <if test="province != null"> and province=#{province}</if>
    </select>

    <select id="queryDownloadUsers" resultType="svm.sample.entity.UserDO" resultMap="userMap">
        select emp_id,name,birthday,province,city,dept_id,salary,work_year,gender,memo,file_name,attachment_id
        from sample_emp where name like 'test%'
        order by attachment_id
    </select>

    <insert id="saveAttachment" parameterType="svm.sample.entity.UserAttachment">
        insert into sample_emp_attachment(attachment_id, file_name, file_type, content)
        values (
            #{attachmentId, jdbcType=NUMERIC},
            #{fileName, jdbcType=VARCHAR},
            #{fileType, jdbcType=VARCHAR},
            #{content, jdbcType=BLOB})
    </insert>

    <select id="queryAttachment" resultType="svm.sample.entity.UserAttachment">
        select attachment_id, file_name, file_type, content
        from sample_emp_attachment where attachment_id=#{id}
    </select>
</mapper>